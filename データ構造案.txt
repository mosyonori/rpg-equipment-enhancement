# 戦闘システム データ構造設計（修正版）

## 🎯 基本キャラクターデータ（PlayerとEnemyの共通基底）

### **BattleCharacter（共通基底クラス）**
```csharp
public abstract class BattleCharacter
{
    // 基本情報
    public string Name { get; set; }                    // キャラクター名
    public int Position { get; set; }                   // 配置場所（1~3、UI表示用）
    public bool IsAlive { get; set; } = true;          // 生存状態
    
    // HP関連
    public int CurrentHP { get; set; }                  // 現在の体力
    public int MaxHP { get; set; }                      // 最大体力
    
    // 実際のステータス（装備・効果適用後の値）
    public int AttackPower { get; set; }                // 攻撃力
    public int DefensePower { get; set; }               // 防御力
    public float CriticalRate { get; set; }             // クリティカル率（%）
    public int Speed { get; set; }                      // 速度
    
    // 属性攻撃力（装備・効果適用後の値）
    public int FireAttack { get; set; }                 // 火属性攻撃力
    public int WaterAttack { get; set; }                // 水属性攻撃力
    public int WindAttack { get; set; }                 // 風属性攻撃力
    public int EarthAttack { get; set; }                // 土属性攻撃力
    
    // スキル情報
    public BattleSkill Skill1 { get; set; }             // スキル1
    public BattleSkill Skill2 { get; set; }             // スキル2
    
    // 状態異常管理
    public List<StatusEffect> ActiveEffects { get; set; } = new List<StatusEffect>();
    
    // 戦闘中の一時データ
    public bool HasActedThisTurn { get; set; } = false; // このターンに行動済みか
    
    // 計算プロパティ
    public ElementType PrimaryElement => GetPrimaryElement(); // 主属性（最も高い属性攻撃力）
    public int EffectiveAttackPower => CalculateEffectiveAttack();
    public int EffectiveDefensePower => CalculateEffectiveDefense();
    
    // AI行動ロジック（共通）
    public BattleSkill GetNextAction()
    {
        // スキル1が使用可能な場合
        if (Skill1 != null && Skill1.CanUse)
            return Skill1;
            
        // スキル2が使用可能な場合
        if (Skill2 != null && Skill2.CanUse)
            return Skill2;
            
        // 通常攻撃（null を返して通常攻撃を示す）
        return null;
    }
    
    // ターゲット選択ロジック（共通）
    public BattleCharacter SelectTarget(List<BattleCharacter> enemies)
    {
        var aliveEnemies = enemies.Where(e => e.IsAlive).ToList();
        if (!aliveEnemies.Any()) return null;
        
        // 1. 有利な属性の相手を優先
        var advantageousTargets = GetAdvantageousTargets(aliveEnemies);
        if (advantageousTargets.Any())
        {
            return SelectBySecondaryPriority(advantageousTargets);
        }
        
        // 有利な属性がない場合は全体から選択
        return SelectBySecondaryPriority(aliveEnemies);
    }
    
    // 主属性取得
    private ElementType GetPrimaryElement()
    {
        int maxAttack = Math.Max(Math.Max(FireAttack, WaterAttack), 
                                Math.Max(WindAttack, EarthAttack));
        
        if (maxAttack == 0) return ElementType.None;
        
        if (FireAttack == maxAttack) return ElementType.Fire;
        if (WaterAttack == maxAttack) return ElementType.Water;
        if (WindAttack == maxAttack) return ElementType.Wind;
        if (EarthAttack == maxAttack) return ElementType.Earth;
        
        return ElementType.None;
    }
    
    // 有利な属性の相手を取得
    private List<BattleCharacter> GetAdvantageousTargets(List<BattleCharacter> targets)
    {
        ElementType advantageousElement = GetAdvantageousElement(PrimaryElement);
        if (advantageousElement == ElementType.None) return new List<BattleCharacter>();
        
        return targets.Where(t => t.PrimaryElement == advantageousElement).ToList();
    }
    
    // 属性相性による有利な属性を取得
    private ElementType GetAdvantageousElement(ElementType myElement)
    {
        return myElement switch
        {
            ElementType.Fire => ElementType.Wind,   // 火は風に有利
            ElementType.Wind => ElementType.Earth,  // 風は土に有利
            ElementType.Earth => ElementType.Water, // 土は水に有利
            ElementType.Water => ElementType.Fire,  // 水は火に有利
            _ => ElementType.None
        };
    }
    
    // 2次優先度でターゲット選択
    private BattleCharacter SelectBySecondaryPriority(List<BattleCharacter> targets)
    {
        // 2. HPが最も低い相手
        int minHP = targets.Min(t => t.CurrentHP);
        var lowHPTargets = targets.Where(t => t.CurrentHP == minHP).ToList();
        
        if (lowHPTargets.Count == 1)
            return lowHPTargets[0];
        
        // 3. スキルがCT中でない相手（どちらかのスキルが使用可能）
        var skillReadyTargets = lowHPTargets.Where(t => 
            (t.Skill1?.CanUse == true) || (t.Skill2?.CanUse == true)).ToList();
        
        if (skillReadyTargets.Any())
        {
            if (skillReadyTargets.Count == 1)
                return skillReadyTargets[0];
            
            // 4. 位置が若い順
            return skillReadyTargets.OrderBy(t => t.Position).First();
        }
        
        // スキルが全てCT中の場合も位置順で選択
        return lowHPTargets.OrderBy(t => t.Position).First();
    }
    
    // 効果適用後のステータス計算
    private int CalculateEffectiveAttack()
    {
        int baseValue = AttackPower;
        float multiplier = 1.0f;
        
        foreach (var effect in ActiveEffects)
        {
            baseValue += effect.AttackModifier;
            multiplier *= effect.AttackMultiplier;
        }
        
        return Mathf.RoundToInt(baseValue * multiplier);
    }
    
    private int CalculateEffectiveDefense()
    {
        int baseValue = DefensePower;
        float multiplier = 1.0f;
        
        foreach (var effect in ActiveEffects)
        {
            baseValue += effect.DefenseModifier;
            multiplier *= effect.DefenseMultiplier;
        }
        
        return Mathf.RoundToInt(baseValue * multiplier);
    }
}
```

## 👤 プレイヤーデータ構造

### **BattlePlayer : BattleCharacter**
```csharp
public class BattlePlayer : BattleCharacter
{
    // プレイヤー固有データ
    public int PlayerId { get; set; }                   // プレイヤーID
    public int Level { get; set; }                      // レベル
    public int Experience { get; set; }                 // 経験値
    
    // 装備情報（戦闘開始時にユーザーデータから取得してステータスに反映）
    public List<int> EquippedItems { get; set; } = new List<int>();
    
    // プレイヤー専用メソッド（必要に応じて追加）
    public void ApplyEquipmentStats(UserEquipment equipment)
    {
        // 装備からステータスを計算してBattleCharacterのプロパティに設定
        // DataManagerから装備データを取得して反映
    }
}
```

## 👹 敵モンスターデータ構造

### **BattleEnemy : BattleCharacter**
```csharp
public class BattleEnemy : BattleCharacter
{
    // 敵固有データ
    public int EnemyId { get; set; }                    // 敵ID（マスターデータ参照）
    public int SpawnOrder { get; set; }                 // 出現順序
    
    // 敵専用メソッド（必要に応じて追加）
    public void InitializeFromMasterData(EnemyMasterData masterData)
    {
        // マスターデータからステータスを初期化
        Name = masterData.Name;
        MaxHP = CurrentHP = masterData.HP;
        AttackPower = masterData.AttackPower;
        DefensePower = masterData.DefensePower;
        // ... 他のステータスも設定
    }
}
```

## ⚔️ スキルデータ構造（簡略版）

### **BattleSkill**
```csharp
public class BattleSkill
{
    public string SkillId { get; set; }                 // スキルID
    public string SkillName { get; set; }               // スキル名
    public int MaxCoolTime { get; set; }                // 最大クールタイム
    public int CurrentCoolTime { get; set; }            // 現在のクールタイム残りターン数
    
    // 使用可能判定
    public bool CanUse => CurrentCoolTime <= 0;
    
    // スキル使用時の処理
    public void Use()
    {
        CurrentCoolTime = MaxCoolTime;
    }
    
    // クールタイム減少
    public void ReduceCoolTime()
    {
        if (CurrentCoolTime > 0)
            CurrentCoolTime--;
    }
}
```

## 🎭 状態異常データ構造

### **StatusEffect**
```csharp
public class StatusEffect
{
    public string EffectId { get; set; }                // 効果ID
    public string EffectName { get; set; }              // 効果名
    public int RemainingTurns { get; set; }             // 残りターン数
    public StatusEffectType EffectType { get; set; }    // 効果タイプ
    
    // 効果値
    public int AttackModifier { get; set; } = 0;        // 攻撃力修正値
    public int DefenseModifier { get; set; } = 0;       // 防御力修正値
    public float AttackMultiplier { get; set; } = 1.0f; // 攻撃力倍率
    public float DefenseMultiplier { get; set; } = 1.0f; // 防御力倍率
    
    // 属性修正
    public int FireAttackModifier { get; set; } = 0;
    public int WaterAttackModifier { get; set; } = 0;
    public int WindAttackModifier { get; set; } = 0;
    public int EarthAttackModifier { get; set; } = 0;
    
    // ターン終了時処理
    public bool IsExpired => RemainingTurns <= 0;
    
    public void ReduceTurn()
    {
        if (RemainingTurns > 0)
            RemainingTurns--;
    }
}
```

## 🏟️ 戦闘管理データ構造（簡略版）

### **BattleManager**
```csharp
public class BattleManager
{
    // クエスト情報
    public int QuestId { get; set; }                    // クエストID
    public int TurnLimit { get; set; }                  // 限界ターン数
    public int CurrentTurn { get; set; }                // 現在のターン数
    
    // 参加者
    public List<BattlePlayer> Players { get; set; } = new List<BattlePlayer>();
    public List<BattleEnemy> Enemies { get; set; } = new List<BattleEnemy>();
    
    // 行動順序
    public Queue<BattleCharacter> ActionQueue { get; set; } = new Queue<BattleCharacter>();
    public BattleCharacter CurrentActor { get; set; }   // 現在行動中のキャラクター
    
    // 戦闘状態
    public BattleState CurrentState { get; set; }       // 戦闘状態
    public BattleResult BattleResult { get; set; }      // 戦闘結果
    
    // 全キャラクターのリスト取得
    public List<BattleCharacter> AllCharacters => 
        Players.Cast<BattleCharacter>().Concat(Enemies.Cast<BattleCharacter>()).ToList();
    
    // 生存中のキャラクターのみ取得
    public List<BattleCharacter> AliveCharacters => 
        AllCharacters.Where(c => c.IsAlive).ToList();
    
    // ドロップ処理はクエストマスターデータを参照
    public void ProcessItemDrops()
    {
        // QuestIdからクエストマスターデータを取得
        // itemDropCSVの内容に基づいてドロップ判定
        // 結果をBattleResultに格納
    }
}
```

## 📊 列挙型定義

### **各種列挙型**
```csharp
public enum ElementType
{
    None,    // 無属性
    Fire,    // 火
    Water,   // 水
    Wind,    // 風
    Earth    // 土
}

public enum BattleState
{
    Initializing,    // 初期化中
    InProgress,      // 戦闘中
    Victory,         // 勝利
    Defeat,          // 敗北
    TimeUp          // 時間切れ
}

public enum StatusEffectType
{
    Buff,           // バフ
    Debuff,         // デバフ
    Poison,         // 毒
    Heal            // 回復
}

public enum BattleResult
{
    None,           // 未決定
    Victory,        // 勝利
    Defeat,         // 敗北
    TimeUp         // 時間切れ敗北
}
```

## 🎯 主な修正点

### 1. **ステータス管理の簡略化**
- `Base***`プロパティを削除し、実際の値を直接管理
- 装備適用後の値をBattleCharacterで保持

### 2. **AI行動の共通化**
- プレイヤーとモンスターで同じ行動ロジックを使用
- ターゲット選択ロジックも基底クラスで共通実装

### 3. **プレイヤー属性の自動判定**
- 最も高い属性攻撃力を主属性として自動設定
- 属性相性によるターゲット優先度を実装

### 4. **不要データの削除**
- モンスター個別のドロップ率を削除
- スキルの詳細効果データを削除（マスターデータ参照）
- BattleManagerのドロップアイテムリストを削除

### 5. **既存システムとの連携**
- 装備システムとの連携メソッドを追加
- クエストマスターデータとの連携を考慮
- DataManagerとの連携を前提とした設計

この修正版で、オート戦闘システムと既存のゲームシステムとの整合性が取れていると思いますが、いかがでしょうか？